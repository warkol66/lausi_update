<?php
 class HashMap { var $stack = array(); function HashMap($key='', $val='') { if($key != '' && $val != '') { $this->put($key, $val); } } function put($key, $val) { $this->stack[$key] = $val; } function peek($key) { return $this->stack[$key]; } function getValue($key) { return $this->peek($key); } function getArrayList($key) { $arrayList = NULL; foreach($this->stack as $k => $v) { if($k == $key) { $arrayList[] = $v; } } return $arrayList; } function getKeySet() { $arrayList = array(); foreach($this->stack as $k => $v) { $arrayList[$k] = NULL; } return $arrayList; } function clear() { unset($this->stack); $this->stack = array(); } function stringArrayList() { $sb=NULL; $sb .= "***** ------------------------------------------- *****<br>\n"; foreach($this->stack as $k => $v) { $sb .= "Key: ".$k." Value: ".$v."<br>\n"; } $sb .= "***** ------------------------------------------- *****<br>\n"; return $sb; } } ?>
<?php
 class BasicDataSource { var $connectionPool = NULL; var $connectionProperties = array(); var $dataSource = NULL; var $logWriter = NULL; var $defaultAutoCommit = True; var $defaultReadOnly = False; var $driverClassName = NULL; var $driverDescription = NULL; var $maxActive = 4; var $maxIdle = 3; var $maxWait = 1000; var $username = NULL; var $password = NULL; var $url = NULL; var $validationQuery = NULL; function getDefaultAutoCommit() { return $this->defaultAutoCommit; } function setDefaultAutoCommit($defaultAutoCommit) { $this->defaultAutoCommit = $defaultAutoCommit; } function getDefaultReadOnly() { return $this->defaultReadOnly; } function setDefaultReadOnly($defaultReadOnly) { $this->defaultReadOnly = $defaultReadOnly; } function getDriverClassName() { return $this->driverClassName; } function setDriverClassName($driverClassName) { $this->driverClassName = $driverClassName; } function getDriverDescription() { return $this->driverDescription; } function setDriverDescription($description) { $this->driverDescription = $description; } function getMaxActive() { return $this->maxActive; } function setMaxActive($maxActive) { $this->maxActive = $maxActive; } function getMaxIdle() { return $this->maxIdle; } function setMaxIdle($maxIdle) { $this->maxIdle = $maxIdle; } function getMaxWait() { return $this->maxWait; } function setMaxWait($maxWait) { $this->maxWait = $maxWait; } function getNumActive() { return NULL; } function getNumIdle() { return NULL; } function getUsername() { return $this->username; } function setUsername($username) { $this->username = $username; } function getPassword() { return $this->password; } function setPassword($password) { $this->password = $password; } function getUrl() { return $this->url; } function setUrl($url) { $this->url = $url; } function getValidationQuery() { return $this->validationQuery; } function setValidationQuery($validationQuery) { $this->validationQuery = $validationQuery; } function getConnection($username='', $password='') { $ds = $this->createDataSource(); return $ds->getConnection($username, $password); } function addConnectionProperty($name, $value) { $this->connectionProperties[$name] = $value; } function close() {} function createDataSource() { if($this->dataSource != NULL) { return $this->dataSource; } $driverClass = NULL; $driverClassFile = $this->driverClassName.'.php'; include_once $driverClassFile; $driverClass = new $driverClassName; if($driverClass == NULL) { $message = "Cannot load Database driver class '" . $this->driverClassName . "'"; print $message; return; } if($this->username != NULL) { $this->connectionProperties['user'] = $this->username; } else { print "DBCP DataSource configured without a 'username'"; } if($this->password != NULL) { $this->connectionProperties['password'] = $this->password; } else { print "DBCP DataSource configured without a 'password'"; } return; } } ?>
<?php
 class AbstractSAXParser { var $handler = null; function AbstractSAXParser() {} function parserSetOption($opt,$val) {} function setHandler(&$obj) { $this->handler=&$obj; } function setListener(&$obj) { $this->setHandler($obj); } function startElementHandler($parser, $name, $attribs) { $this->listener->startElementHandler($name, $attribs);; } function endElementHandler($parser, $name) { $this->listener->endElementHandler($name); } function characters($parser, $data) { $this->handler->characters($data); } function parse() {} } ?>

<?php
 class ExpatParser extends AbstractSAXParser { var $parser = null; var $file = null; var $buffer = 4096; var $error_string = ""; var $line = 0; function ExpatParser($xmlFile=NULL) { $this->file = $xmlFile; $this->parser = xml_parser_create(); $this->buffer = 4096; xml_set_element_handler($this->parser,"startElementHandler","endElementHandler"); xml_set_character_data_handler($this->parser,"characterDataHandler"); } function parserSetOption($opt, $val) { return xml_parser_set_option($this->parser, $opt, $val); } function parse($filename=null) { if ( $filename !== null ) $this->filename = $filename; if ( is_file($this->filename) ) { $fp = fopen($this->filename, "r"); if ( !is_resource($fp) ) { return 0; } while ($data = fread($fp, $this->buffer)) { if (!xml_parse($this->parser, $data, feof($fp))) { $error = xml_error_string(xml_get_error_code($this->parser)); $line = xml_get_current_line_number($this->parser); xml_parser_free($this->parser); die("Error: ".$this->error_string." on line ".$this->line); } } } elseif ( is_string($this->filename) ) { $data = $this->filename; if(!xml_parse($this->parser, $data, true)) { $this->error_string = xml_error_string(xml_get_error_code($this->parser)); $this->line = xml_get_current_line_number($this->parser); xml_parser_free($this->parser); die("Error: ".$this->error_string." on line ".$this->line); } } else { return 0; } xml_parser_free($this->parser); return 1; } } ?>

<?php
 class Rule { var $digester = NULL; var $namespaceURI = NULL; function Rule() {} function getDigester() { return $this->digester; } function setDigester(&$digester) { $this->digester =& $digester; } function getNamespaceURI() { return $this->namespaceURI; } function setNamespaceURI($namespaceURI) { $this->namespaceURI = $namespaceURI; } function begin($attributes, &$digester) { $this->digester =& $digester; ; } function body($text, &$digester) { ; } function end(&$digester) { $this->digester =& $digester; ; } function finish() { ; } } ?>
<?php
 class Rules { function getDigester() {} function setDigester($digester) {} function getNamespaceURI() {} function setNamespaceURI($namespaceURI) {} function add($pattern, $rule) {} function clear() {} function match($namespaceURI, $pattern) {} function rules() { ; } } ?>
<?php
 class RulesManager extends Rules { var $cache = NULL; var $digester = NULL; var $namespaceURI = NULL; var $rules = array(); function RulesManager() { $this->cache = new HashMap(); } function getDigester() { return $this->digester; } function setDigester(&$digester) { $this->digester = &$digester; } function getNamespaceURI() { return $this->namespaceURI; } function setNamespaceURI($namespaceURI) { $this->namespaceURI = $namespaceURI; } function add($pattern, &$rule) { $list = array(); $list = $this->cache->getArrayList($pattern); if($list == NULL) { $list = array(); } else { $list = $list[0]; } array_push($list, $rule); $this->cache->put($pattern, $list); if($this->namespaceURI != NULL) { $rule->setNamespaceURI($this->namespaceURI); } array_push($this->rules, $rule); } function clear() { $this->cache->clear(); unset($this->rules); } function &match($namespaceURI=NULL, $pattern) { $rulesSet = NULL; $rulesSet =& $this->lookupRules($namespaceURI, $pattern); if( ($rulesSet == NULL) || count($rulesSet) < 1 ) { $longKey = ''; $keys = array(); $keys = $this->cache->getKeySet(); foreach($keys as $key => $v) { if( substr($key, 0, 2) == "*/" ) { $len = strlen(substr($key, 1)); if( $pattern == substr($key, 2) || substr($pattern, -$len) == substr($key, 1) ) { if( strlen($key) > strlen($longKey) ) { $rulesSet = $this->lookupRules($namespaceURI, $key); $longKey = $key; } } } } } if($rulesSet == NULL) { $rulesSet = array(); } return $rulesSet; } function rules() { return $this->rules; } function &lookupRules($namespaceURI=NULL, $pattern) { $ruleList = NULL; $ruleList = $this->cache->getArrayList( strtolower($pattern) ); if($ruleList != NULL) { $ruleList = $ruleList[0]; } else { $ret = NULL; return $ret; } if( ($namespaceURI == NULL) || (strlen($namespaceURI) == 0) ) { return $ruleList; } $resultList = array(); foreach($ruleList as $ruleItem) { if( ($namespaceURI == $ruleItem->getNamespaceURI() ) || ($ruleItem->getNamespaceURI() == NULL) ) { array_push($resultList, $ruleItem); } } return $resultList; } } ?>
<?php
 class ObjectCreateRule extends Rule { var $attributeName = NULL; var $className = NULL; function ObjectCreateRule($className, $attributeName=NULL) { $this->className = $className; $this->attributeName = $attributeName; } function begin($attributes=NULL, &$digester) { $this->digester =& $digester; $value = NULL; $realClassName = NULL; $realClassName = $this->className; if($this->attributeName != NULL) { if( array_key_exists($this->attributeName, $attributes) ) { $value = $attributes[$this->attributeName]; } if($value != NULL) { $realClassName = $value; } } $debug = $this->digester->log->getLog('isDebugEnabled'); if($debug) { $log = &$this->digester->log; $log->debug("ObjectCreateRule->Begin(){" . $this->digester->match . "}New " . $realClassName); } $oRule = NULL; $oRule = NULL; if(! class_exists( $realClassName ) ){ include_once $realClassName.'.php'; } $oRule =& new $realClassName; $this->digester->push($oRule); } function end(&$digester) { $this->digester = &$digester; $top = NULL; $top = $this->digester->pop(); $debug = $this->digester->log->getLog('isDebugEnabled'); if($debug) { $log = &$this->digester->log; $log->debug( "ObjectCreateRule->end(){" . $this->digester->match . "} Pop " . get_class($top) ); } } function toString() { $sb = NULL; $sb .= 'ObjectCreateRule['; $sb .= 'className='; $sb .= $this->className; $sb .= ', attributeName='; $sb .= $this->attributeName; $sb .= ']'; return $sb; } } ?>
<?php
 class SetPropertyRule extends Rule { var $name = NULL; var $value = NULL; function SetPropertyRule($name='', $value='') { $this->name = $name; $this->value = $value; } function begin($attributes, &$digester) { $this->digester =& $digester; $debug = $this->digester->log->getLog('isDebugEnabled'); $actualName = NULL; $actualValue = NULL; if($this->value == NULL) { if( array_key_exists($this->name, $attributes) ) { $actualName = $this->name; $actualValue = $attributes[$this->name]; } } else { foreach($attributes as $attribName => $attribValue) { if($attribName == $this->name) { $actualName = $attribValue; } elseif($attribName == $this->value) { $actualValue = $attribValue; } } } $values[$actualName] = $actualValue; $oTop =& $this->digester->peek(); $debug = $this->digester->log->getLog('isDebugEnabled'); if($debug) { $log = $this->digester->log; $log->debug('[SetPropertyRule]{'.$this->digester->match.'} Set '. get_class($oTop).' property '.$actualName .' to '.$actualValue); } $oTop->addProperty($actualName, $actualValue); } function toString() { $sb = 'SetPropertyRule['; $sb .= 'name='; $sb .= $this->name; $sb .= ', value='; $sb .= $this->value; $sb .= ']'; return $sb; } } ?>
<?php
 class SetPropertiesRule extends Rule { var $attributeNames = array(); var $propertyNames = array(); function SetPropertiesRule($attributeNames=NULL, $propertyNames=NULL) { if(is_array($attributeNames) && is_array($propertyNames) ) { $this->attributeNames = $attributeNames; $this->propertyNames = $propertyNames; } } function begin($attributes, &$digester) { $this->digester =& $digester; $debug = $this->digester->log->getLog('isDebugEnabled'); $name = ''; $values = array(); $propNamesLength = count($this->propertyNames); foreach($attributes as $attribName => $attribValue) { $name = $attribName; $n = 0; foreach($this->attributeNames as $attName) { if($attName == $attribName) { if($n < $propNamesLength) { $name = $this->propertyNames[$n]; } else { $name = NULL; } } $n++; } $values[$name] = $attribValue; } $oTop =& $this->digester->peek(); if($debug) { $log = $this->digester->log; $log->debug('[SetPropertiesRule]{'.$this->digester->match. '} Set '.get_class($oTop).' properties'); } $attribName = $attribValue = NULL; foreach($values as $attribName => $attribValue) { if($attribName == NULL) { continue; } if($debug) { $log = $this->digester->log; $log->debug("[SetPropertiesRule]{".$this->digester->match. "} Setting property '".$attribName."' => '".$attribValue."'"); } $oTop->addProperty($attribName, $attribValue); } } function toString() { $sb = 'SetPropertiesRule['; $sb .= ']'; return $sb; } } ?>
<?php
 class SetNextRule extends Rule { var $methodName = NULL; var $paramType = NULL; function SetNextRule($methodName, $paramType=NULL) { $this->methodName = $methodName; $this->paramType = $paramType; } function end(&$digester) { $this->digester =& $digester; $oChild =& $this->digester->peek(0); $oParent =& $this->digester->peek(1); $log = $this->digester->log; $debug = $log->getLog('isDebugEnabled'); if($debug) { if($oParent == NULL) { $log->debug('SetNextRule->end(){'.$this->digester->match. '} Call [NULL PARENT].'.$this->methodName. '('.get_class($oChild).')'); } else { $log->debug('[SetNextRule]{'.$this->digester->match. '} Call '.get_class($oParent).'->'. $this->methodName .'('.get_class($oChild).')'); } } if(($oChild != NULL) && ($oParent != NULL)) { $methodName = $this->methodName; $oParent->$methodName($oChild); } } function toString() { $sb = 'SetNextRule['; $sb .= 'methodName='; $sb .= $this->methodName; $sb .= ', paramType='; $sb .= $this->paramType; $sb .= ']'; return $sb; } } ?>
<?php
 class Digester extends ExpatParser { var $log = NULL; var $saxLog = NULL; var $rulesMan = NULL; var $match = NULL; var $bodyText = NULL; var $bodyTexts = array(); var $configured= NULL; var $root = NULL; var $stack = array(); var $namespaceAware = False; var $validating = False; function getValidating() { return $this->validating; } function setValidating($validating) { $this->validating = $validating; } function setProperty($property, &$ref) { $this->$property = &$ref; } function getProperty($property) { return $this->$property; } function Digester($file=NULL) { parent::ExpatParser($file); $this->log = new PhpMVC_Log(); $this->log->setLog('isDebugEnabled' , False); $this->saxLog = new PhpMVC_Log(); $this->saxLog->setLog('isDebugEnabled' , False); } function parse($file) { xml_set_object($this->parser, $this); $this->configure(); parent::parse($file); if(isset($this->root)) { return $this->root; } else { return NULL; } } function configure() { if($this->configured) { return; } $this->configured = True; } function startElementHandler($parser, $elemName, $attrList) { $debug = $this->log->getLog('isDebugEnabled'); array_push($this->bodyTexts, $this->bodyText); if($debug) { $this->log->debug("Start Element handler - Pushing body text '". $this->bodyText."'"); } $this->bodyText = ''; $sb = $this->match; if(strlen($this->match) > 0) { $sb .= '/'; } $sb .= $elemName; $this->match = $sb; if($debug) { $this->log->debug(" New match '".$this->match."'"); } $bodyText= NULL; $rulesManager = $this->getRulesManager(); $rulesSet = NULL; $namespace = NULL; $rulesSet = $rulesManager->match($namespace, $this->match); if( ($rulesSet != NULL) && (count($rulesSet) > 0) ) { foreach($rulesSet as $oRule) { if($debug) { $this->log->debug("  Fire begin() for ".get_class($oRule). " Pattern:".$this->match); } $res = NULL; $res = $oRule->begin($attrList, $this); if($res['exception'] != NULL) { $error = $res['exception']; $this->log->error("Begin event threw exception", $error); } if($res['error'] != NULL) { $error = $res['error']; $this->log->error("Begin event threw error", $error); } } } else { if($debug) { $this->log->debug("  No rules found matching '" . $this->match . "'."); } } } function endElementHandler($parser, $elemName) { $debug = $this->log->getLog('isDebugEnabled'); $saxDebug= $this->saxLog->getLog('isDebugEnabled'); if($debug) { if($saxDebug) { $this->saxLog->debug('endElement(' . $elemName . ')'); } $this->log->debug("  match='" . $this->match . "'"); $this->log->debug("  bodyText='" . $this->bodyText . "'"); } $rulesSet = NULL; $namespace = NULL; $bodyText = NULL; $rulesManager = $this->getRulesManager(); $rulesSet =& $rulesManager->match($namespace, $this->match); if( ($rulesSet != NULL) && (count($rulesSet) > 0) ) { $bodyText = $this->bodyText; foreach($rulesSet as $oRule) { if($debug) { $this->log->debug( "  Fire body() for " . get_class($oRule) ); } $res = NULL; $res = $oRule->body($bodyText, $this); if($res['exception'] != NULL) { $error = $res['exception']; $this->log->error("Body event threw exception", $error); } if($res['error'] != NULL) { $error = $res['error']; $this->log->error("Body event threw error", $error); } } } else { if($debug) { $this->log->debug("  No rules found matching '".$this->match."'."); } } $this->bodyText = array_pop($this->bodyTexts); if($debug) { $this->log->debug("  Popping body text '" . $this->bodyText . "'"); } if($rulesSet != NULL) { $rulesSetRev = array_reverse($rulesSet, True); foreach($rulesSetRev as $oRule) { if($debug) { $this->log->debug("  Fire end() for " . get_class($oRule) ); } $res = NULL; $res = $oRule->end($this); if($res['exception'] != NULL) { $error = $res['exception']; $this->log->error("End event threw exception", $error); } if($res['error'] != NULL) { $error = $res['error']; $this->log->error("End event threw error", $error); } } } $slashPos = strrpos($this->match, '/'); if($slashPos === False) { $this->match = ''; } else { $this->match = substr($this->match, 0, $slashPos); } } function characterDataHandler($parser, $data) { $data = trim($data); $saxDebug = $this->saxLog->getLog('isDebugEnabled'); if($saxDebug) { $this->saxLog->debug(' Body Element- characterDataHandler(' . $data. ')'); } $this->bodyText .= $data; } function setRulesManager(&$rulesManager) { $this->rulesMan =& $rulesManager; $this->rulesMan->setDigester($this); } function &getRulesManager() { if($this->rulesMan == NULL) { $this->rulesMan = new RulesManager(); $this->rulesMan->setDigester($this); } return $this->rulesMan; } function addRule($pattern, &$rule) { $oRulesMan =& $this->getRulesManager(); $oRulesMan->add($pattern, $rule); } function addRuleSet($ruleSet) { $newNamespaceURI = ''; $newNamespaceURI = NULL; $debug = $this->log->getLog('isDebugEnabled'); if($debug) { if($newNamespaceURI == NULL) { $this->log->debug("addRuleSet() with no namespace URI"); } else { $this->log->debug("addRuleSet() with namespace URI ".$newNamespaceURI); } } $ruleSet->addRuleInstances($this); } function addObjectCreate($pattern, $className, $attributeName=NULL) { $oRule = new ObjectCreateRule($className, $attributeName); $this->addRule($pattern, $oRule); } function addSetProperty($pattern, $name, $value) { $oRule = new SetPropertyRule($name, $value); $this->addRule($pattern, $oRule); } function addSetProperties($pattern, $attributeNames=NULL, $propertyNames=NULL) { $oRule = new SetPropertiesRule($attributeNames, $propertyNames); $this->addRule($pattern, $oRule); } function addSetNext($pattern, $methodName, $paramType=NULL) { $oRule = new SetNextRule($methodName, $paramType); $this->addRule($pattern, $oRule); } function &peek($n=0) { $debug = $this->log->getLog('isDebugEnabled'); $tos = count($this->stack) - 1; $ix = $tos - $n; $oObject = NULL; if(array_key_exists($ix, $this->stack)) { $oObject =& $this->stack[$ix]; } if($oObject != NULL) { return $oObject; } else { if($debug) { $this->log->warn("Empty stack (returning NULL)"); } $ret = NULL; return $ret; } } function push(&$object) { if(count($this->stack) == 0) { $this->root =& $object; } $this->stack[] =& $object; } function pop() { $debug = $this->log->getLog('isDebugEnabled'); $object = NULL; $object = array_pop($this->stack); if($object === NULL) { if($debug) { $this->log->warn('Empty stack, or NULL element (returning NULL)'); } return NULL; } else { return $object; } } function getCount() { return count($this->stack); } function clear() { $this->match = NULL; $this->bodyTexts = array(); $this->stack = array(); } } ?>
<?php
 class RuleSet { function getNamespaceURI() {} function addRuleInstances($digester) { ; } } ?>
<?php
 class RuleSetBase extends RuleSet { var $namespaceURI = NULL; function getNamespaceURI() { return $this->namespaceURI; } function addRuleInstances($digester) { ; } } ?>
<?php
 class ConfigRuleSet extends RuleSetBase { function addRuleInstances(&$digester) { $applicationPattern = 'phpmvc-config'; $dataSourcesPattern = 'phpmvc-config/data-sources'; $dataSourcePattern = 'phpmvc-config/data-sources/data-source'; $dataSrcSetPropPattern = 'phpmvc-config/data-sources/data-source/set-property'; $actionMappingsPattern = 'phpmvc-config/action-mappings'; $actionMappingPattern = 'phpmvc-config/action-mappings/action'; $actionMapPropPattern = 'phpmvc-config/action-mappings/action/set-property'; $actionForwardPattern = 'phpmvc-config/action-mappings/action/forward'; $actionFwdPropPattern = 'phpmvc-config/action-mappings/action/forward/set-property'; $formBeansPattern = 'phpmvc-config/form-beans'; $formBeanPattern = 'phpmvc-config/form-beans/form-bean'; $formBeanPropPattern = 'phpmvc-config/form-beans/form-bean/set-property'; $controllerConfigPattern = 'phpmvc-config/controller'; $setControllerConfigPattern= 'phpmvc-config/controller/set-property'; $plugInPattern = 'phpmvc-config/plug-in'; $setPlugInPropPattern = 'phpmvc-config/plug-in/set-property'; $viewRescConfigPattern = 'phpmvc-config/view-resources'; $setViewRescConfigPattern = 'phpmvc-config/view-resources/set-property'; $digester->addObjectCreate( $dataSourcePattern, 'DataSourceConfig', 'className'); $digester->addSetProperties($dataSourcePattern); $digester->addSetNext($dataSourcePattern, 'addDataSourceConfig'); $digester->addSetProperty($dataSrcSetPropPattern, 'property', 'value'); $digester->addObjectCreate($actionMappingPattern, 'ActionConfig', 'className'); $digester->addSetProperties($actionMappingPattern); $digester->addSetNext($actionMappingPattern, 'addActionConfig'); $digester->addSetProperty($actionMapPropPattern, 'property', 'value'); $digester->addObjectCreate($actionForwardPattern, 'ForwardConfig', 'className'); $digester->addSetProperties($actionForwardPattern); $digester->addSetNext($actionForwardPattern, 'addForwardConfig'); $digester->addSetProperty($actionFwdPropPattern, 'property', 'value'); $digester->addObjectCreate($formBeanPattern, 'FormBeanConfig', 'className'); $digester->addSetProperties($formBeanPattern); $digester->addSetNext($formBeanPattern, 'addFormBeanConfig'); $digester->addSetProperty($formBeanPropPattern, 'property', 'value'); $digester->addObjectCreate($controllerConfigPattern, 'ControllerConfig', 'className'); $digester->addSetProperties($controllerConfigPattern); $digester->addSetNext($controllerConfigPattern, 'setControllerConfig', 'ControllerConfig'); $digester->addSetProperty($setControllerConfigPattern, 'property', 'value'); $digester->addObjectCreate($plugInPattern, NULL, 'className'); $digester->addSetProperties($plugInPattern); $digester->addSetNext($plugInPattern, 'addPlugIn', 'phpmvc.action.PlugIn'); $digester->addSetProperty($setPlugInPropPattern, 'property', 'value'); $digester->addObjectCreate($viewRescConfigPattern, 'ViewResourcesConfig', 'className'); $digester->addSetProperties($viewRescConfigPattern); $digester->addSetNext($viewRescConfigPattern, 'setViewResourcesConfig', 'ViewResourcesConfig'); $digester->addSetProperty($setViewRescConfigPattern, 'property', 'value'); } } ?>
