<?php

  // include base peer class
  require_once 'om/BaseAffiliatePeer.php';
  
  // include object class
  include_once 'Affiliate.php';


/**
 * Skeleton subclass for performing query and update operations on the 'renal_affiliate' table.
 *
 * Usuarios afiliados
 *
 * This class was autogenerated by Propel on:
 *
 * 12/18/06 12:56:58
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer
 */	
class AffiliatePeer extends BaseAffiliatePeer {

	const CLASS_DEFAULT = 'tablero.Dependency';


	function getAll() {
		$cond = new Criteria();
		$todosObj = AffiliatePeer::doSelect($cond);
		return $todosObj;
  }
  
	function getAllPaginated($page=1,$perPage=10) {
		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(AffiliatePeer::ID);

		$pager = new PropelPager($cond,"AffiliatePeer", "doSelect",$page,$perPage);
		return $pager;
	 }    


	 
	function getByName($name,$con = null) {
		$cond = new Criteria();
		$cond->add(AffiliatePeer::NAME,$name);
		$affs = AffiliatePeer::doSelect($cond,$con);
		return $affs[0];
	 }	 

	function getByNamePaginated($name,$page=1,$perPage=10) {
		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->add(AffiliatePeer::NAME,"%".$name."%",Criteria::LIKE);
		$cond->addAscendingOrderByColumn(AffiliatePeer::ID);

		$pager = new PropelPager($cond,"AffiliatePeer", "doSelect",$page,$perPage);
		return $pager;
	 }

  function get($id) {
		$affiliate = AffiliatePeer::retrieveByPK($id);
		return $affiliate;
  }


  function update($id,$name) {
		$affiliate = AffiliatePeer::retrieveByPK($id);
		$affiliate->setName($name);
		$affiliate->save();
		return true;
  }

  function delete($id) {
		$affiliate = AffiliatePeer::retrieveByPk($id);
		$affiliate->delete();
		return true;
  }


  function add($name) {
		$affiliate = new Affiliate();		
		$affiliate->setName($name);
		$affiliate->save();
		return $affiliate->getId();
  }
  
  function create($name,$holder,$directionBoardContact,$telephone,$extraTelephone,$email,$responsible,$con = null) {
		$affiliate = new Affiliate();		
		$affiliate->setName($name);
		$affiliate->save($con);
		$affiliateId = $affiliate->getId();
		if (!empty($affiliateId)) {
			require_once("AffiliateInfoPeer.php");
			require_once("AffiliateUserPeer.php");
			$user = AffiliateUserPeer::create($affiliateId,$name,$name,1,"","","",$con);
			$affiliate->setOwnerId($user->getId());
			$affiliate->save($con);			
			if (AffiliateInfoPeer::add($affiliateId,$holder,$directionBoardContact,$telephone,$extraTelephone,$email,$responsible,$con))			
				return true;
		}
		return false;		
  }    
  

} // AffiliatePeer
