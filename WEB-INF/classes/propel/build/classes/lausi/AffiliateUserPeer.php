<?php

  // include base peer class
  require_once 'om/BaseAffiliateUserPeer.php';

  // include object class
  include_once 'AffiliateUser.php';
  
	include_once 'AffiliateUserGroupPeer.php';
	include_once 'AffiliateUserInfo.php';


/**
 * Skeleton subclass for performing query and update operations on the 'affiliates_user' table.
 *
 * Usuarios de afiliado
 *
 * This class was autogenerated by Propel on:
 *
 * 07/18/07 19:06:41
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class AffiliateUserPeer extends BaseAffiliateUserPeer {

		//Setea si se eliminan realmente los usuarios de la base de datos o se marcan como no activos
		const DELETEUSERS = false;

	  function getAffiliate($affiliateId) {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::AFFILIATEID,$affiliateId);
		$cond->add(AffiliateUserPeer::ACTIVE,1);
		$todosObj = AffiliateUserPeer ::doSelect($cond);
		return $todosObj;
  }

	/**
	* Obtiene todos los usuarios por afiliado.
	*
	*	@return array Informacion sobre todos los usuarios
	*/
	function getAll() {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::ACTIVE,1);
		$todosObj = AffiliateUserPeer::doSelect($cond);
		return $todosObj;
  }

  /**
  * Obtiene todos los usuarios desactivados.
	*
	*	@return array Informacion sobre los usuarios
  */
	function getDeleteds() {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::ACTIVE, 0);
		$todosObj = AffiliateUserPeer::doSelect($cond);
		return $todosObj;
  }

  /**
  * Obtiene todos los usuarios desactivados.
	*
	* @param int $affiliateId Id del afiliado
	*	@return array Informacion sobre los usuarios
  */
	function getDeletedsByAffiliate($affiliateId) {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::AFFILIATEID,$affiliateId);
		$cond->add(AffiliateUserPeer::ACTIVE, 0);
		$todosObj = AffiliateUserPeer::doSelect($cond);
		return $todosObj;
  }


  /**
  * Crea un usuario nuevo por afiliado.
  *
  * @param string $username Nombre de usuario
  * @param string $name Nombre del usuario
  * @param string $surname Apellido del usuario
  * @param string $pass Contraseña del usuario
  * @param int $levelId Id del nivel de usuarios
  * @param string $mailAddress Email del usuario
  * @return boolean true si se creo el usuario correctamente, false sino
	*/
	function create($affiliateId,$username,$password,$levelId,$name,$surname,$mailAddress,$timezone,$con = null) {
	
		$userByAffiliate = new AffiliateUser();
		$userByAffiliate->setUsername($username);
		$userByAffiliate->setAffiliateId($affiliateId);
		$userByAffiliate->setActive(1);
		$userByAffiliate->setTimezone($timezone);
		$userByAffiliate->setCreated(time());
		$userByAffiliate->setUpdated(time());
		$userByAffiliate->setLevelId($levelId);
		if(!empty($password)){
			$userByAffiliate->setPassword(md5($password."ASD"));
		}
		$userByAffiliate->save($con);


		$userByAffiliateInfo = new AffiliateUserInfo();
		$userByAffiliateInfo->setUserId($userByAffiliate->getId());
		$userByAffiliateInfo->setName($name);
		$userByAffiliateInfo->setSurname($surname);
		$userByAffiliateInfo->setMailAddress($mailAddress);
		$userByAffiliateInfo->save($con);

		return $userByAffiliate;
	}


	/**
	* Autentica a un usuario por afiliado.
	*
	* @param string $username Nombre de usuario
	* @param string $password Contraseña 
	* @return User Informacion sobre el usuario, false si no fue exitosa la autenticacion
	*/
  function auth($username,$password) {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::USERNAME, $username);
		$cond->add(AffiliateUserPeer::ACTIVE, "1");
		$todosObj = AffiliateUserPeer::doSelectJoinAffiliateUserInfo($cond);	
		$user = $todosObj[0];

		if ( !empty($user) ) {
			if ( $user->getPassword() == md5($password."ASD") ) {
				$user->setLastLogin(time());
				$user->save();
				return $user;
			}
		}
		return false;
  }




	/**
	* Setea el acceso en 0 o elimina usuario 
	*
	* @param int $id Id del usuario
	* @return boolean true
	*/
  function delete($id) {
		$affiliate = AffiliateUserPeer::retrieveByPk($id);
		if (AffiliateUserPeer::DELETEUSERS)
			$affiliate->delete();
		else {
			$affiliate->setActive(0);
			$affiliate->save();
		}
		return true;
  }


  /**
  * Obtiene la informacion de un usuario.
  *
  * @param int $id Id del usuario
  * @return array Informacion del usuario
  */
	function get($id) {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::ID, $id);
		$todosObj = AffiliateUserPeer::doSelectJoinAffiliateUserInfo($cond);
		
		return $todosObj[0];
	}


	/**
  * Actualiza la informacion de un usuario por afiliado.
  *
  * @param int $id Id del usuario
  * @param string $username Nombre de usuario
  * @param string $name Nombre del usuario
  * @param string $surname Apellido del usuario
  * @param string $pass Contraseña del usuario
  * @param int $levelId Id del nivel de usuarios
  * @param string $mailAddress Email del usuario
  * @return boolean true si se actualizo la informacion correctamente
	*/
  function update($id,$affiliateId,$username,$password,$levelId,$name,$surname,$mailAddress,$timezone) {
		$userByAffiliate = AffiliateUserPeer::retrieveByPK($id);
		$userByAffiliate->setUsername($username);
		$userByAffiliate->setAffiliateId($affiliateId);
		$userByAffiliate->setUpdated(now);
		$userByAffiliate->setTimezone($timezone);
		$userByAffiliate->setLevelId($levelId);
		if(!empty($password)){
			$userByAffiliate->setPassword(md5($password."ASD"));
		}
		$userByAffiliate->save();
			
		$userByAffiliateInfo = AffiliateUserInfoPeer::retrieveByPK($id);
		$userByAffiliateInfo->setName($name);
		$userByAffiliateInfo->setSurname($surname);
		$userByAffiliateInfo->setMailAddress($mailAddress);			
		$userByAffiliateInfo->save();
		return true;
	}
  
  /**
  * Obtiene los grupos de usuarios en los cuales es miembro un usuario por afiliado.
  *
  * @param int $id Id del usuario
  * @return array Grupos de Usuarios
  */
  function getGroupsByUser($id) {
		$cond = new Criteria();
		$cond->add(AffiliateUserGroupPeer::USERID, $id);
		$todosObj = AffiliateUserGroupPeer::doSelectJoinAffiliateGroup($cond);
		return $todosObj;
  }
  
  /**
  * Agrega un usuario a un grupo de usuarios.
  *
  * @param int $user Id del usuario
  * @param int $group Id del grupo de usuarios
  * @return boolean true si se agrego correctamente, false sino
  */
	function addUserToGroup($user,$group) {
		try {
			$userGroup = new AffiliateUserGroup();
			$userGroup->setUserId($user);
			$userGroup->setGroupId($group);
			$userGroup->save();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
	}
	
  /**
  * Elimina un usuario de un grupo de usuarios.
  *
  * @param int $user Id del usuario
  * @param int $group Id del grupo de usuarios
  * @return boolean true si se elimino correctamente, false sino
  */
	function removeUserFromGroup($user,$group) {
		try {
			$cond = new Criteria();
			$cond->add(AffiliateUserGroupPeer::USERID, $user);
			$cond->add(AffiliateUserGroupPeer::GROUPID, $group);
			$todosObj = AffiliateUserGroupPeer::doSelect($cond);
			$obj = $todosObj[0];
			$obj->delete();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
	}
	
	/**
	* Activa un usuario por afiliado a partir del id.
	*
  * @param int $id Id del usuario
	*	@return boolean true
	*/
  function activate($id) {
		$user = AffiliateUserPeer::retrieveByPk($id);
		$user->setActive(1);
		$user->save();
		return true;
  }





	/**
	* Autentica a un usuario.
	*
	* @param string $username Nombre de usuario
	* @param string $mailAddress Email
	* @return array [0] -> User Informacion sobre el usuario; [1] -> New password, false si no fue exitosa la autenticacion de usuario e email
	*/
  function generatePassword($username,$mailAddress) {
		$cond = new Criteria();
		$cond->add(AffiliateUserPeer::USERNAME, $username);
		$cond->add(AffiliateUserPeer::ACTIVE, "1");
		$todosObj = AffiliateUserPeer::doSelectJoinAffiliateUserInfo($cond);
		$user = $todosObj[0];
		if ( !empty($user) ) {
			$userInfo = $user->getAffiliateUserInfo();
			if ( !empty($userInfo) && $userInfo->getMailAddress() == $mailAddress ) {
				$newPassword = AffiliateUserPeer::getNewPassword();
				$user->setPassword(md5($newPassword."ASD"));
				$user->save();
				$result = array();
				$result[0] = $user;
				$result[1] = $newPassword;
				return $result;
			}
		}
		return false;
  }

  /**
  * Genera una nueva contraseña.
  *
  * @param int $length [optional] Longitud de la contraseña
  * @return string Contraseña
  */
	function getNewPassword($length = 8)
	{
  	// start with a blank password
	  $password = "";

  	// define possible characters
	  $possible = "0123456789bcdfghjkmnpqrstvwxyz";

	  // set up a counter
  	$i = 0;

	  // add random characters to $password until $length is reached
  	while ($i < $length) {

	    // pick a random character from the possible ones
  	  $char = substr($possible, mt_rand(0, strlen($possible)-1), 1);

	    // we don't want this character if it's already in the password
  	  if (!strstr($password, $char)) {
	      $password .= $char;
  	    $i++;
	    }
	  }
  	// done!
	  return $password;
	}

} // AffiliateUserPeer
