<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'lausi/AdvertisementPeer.php';

/**
 * Base class that represents a row from the 'lausi_advertisement' table.
 *
 * Base de Avisos
 *
 * This class was autogenerated by Propel on:
 *
 * 10/03/08 16:26:00
 *
 * @package    lausi.om
 */
abstract class BaseAdvertisement extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AdvertisementPeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;


	/**
	 * The value for the date field.
	 * @var        int
	 */
	protected $date;


	/**
	 * The value for the publishdate field.
	 * @var        int
	 */
	protected $publishdate;


	/**
	 * The value for the duration field.
	 * @var        int
	 */
	protected $duration;


	/**
	 * The value for the billboardid field.
	 * @var        int
	 */
	protected $billboardid;


	/**
	 * The value for the themeid field.
	 * @var        int
	 */
	protected $themeid;


	/**
	 * The value for the workforceid field.
	 * @var        int
	 */
	protected $workforceid = 0;

	/**
	 * @var        Billboard
	 */
	protected $aBillboard;

	/**
	 * @var        Theme
	 */
	protected $aTheme;

	/**
	 * @var        Workforce
	 */
	protected $aWorkforce;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * Id del motivo
	 * @return     int
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [optionally formatted] [date] column value.
	 * fecha de actualizacion del aviso
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getDate($format = '%Y/%m/%d')
	{

		if ($this->date === null || $this->date === '') {
			return null;
		} elseif (!is_int($this->date)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->date);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [date] as date/time value: " . var_export($this->date, true));
			}
		} else {
			$ts = $this->date;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Get the [optionally formatted] [publishdate] column value.
	 * fecha de publicacion del aviso
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getPublishdate($format = '%Y/%m/%d')
	{

		if ($this->publishdate === null || $this->publishdate === '') {
			return null;
		} elseif (!is_int($this->publishdate)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->publishdate);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [publishdate] as date/time value: " . var_export($this->publishdate, true));
			}
		} else {
			$ts = $this->publishdate;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Get the [duration] column value.
	 * duracion del motivo
	 * @return     int
	 */
	public function getDuration()
	{

		return $this->duration;
	}

	/**
	 * Get the [billboardid] column value.
	 * activo del aviso
	 * @return     int
	 */
	public function getBillboardid()
	{

		return $this->billboardid;
	}

	/**
	 * Get the [themeid] column value.
	 * motivo del aviso
	 * @return     int
	 */
	public function getThemeid()
	{

		return $this->themeid;
	}

	/**
	 * Get the [workforceid] column value.
	 * contratista asignado a ese workforce (solo sextuples)
	 * @return     int
	 */
	public function getWorkforceid()
	{

		return $this->workforceid;
	}

	/**
	 * Set the value of [id] column.
	 * Id del motivo
	 * @param      int $v new value
	 * @return     void
	 */
	public function setId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AdvertisementPeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [date] column.
	 * fecha de actualizacion del aviso
	 * @param      int $v new value
	 * @return     void
	 */
	public function setDate($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [date] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->date !== $ts) {
			$this->date = $ts;
			$this->modifiedColumns[] = AdvertisementPeer::DATE;
		}

	} // setDate()

	/**
	 * Set the value of [publishdate] column.
	 * fecha de publicacion del aviso
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPublishdate($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [publishdate] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->publishdate !== $ts) {
			$this->publishdate = $ts;
			$this->modifiedColumns[] = AdvertisementPeer::PUBLISHDATE;
		}

	} // setPublishdate()

	/**
	 * Set the value of [duration] column.
	 * duracion del motivo
	 * @param      int $v new value
	 * @return     void
	 */
	public function setDuration($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->duration !== $v) {
			$this->duration = $v;
			$this->modifiedColumns[] = AdvertisementPeer::DURATION;
		}

	} // setDuration()

	/**
	 * Set the value of [billboardid] column.
	 * activo del aviso
	 * @param      int $v new value
	 * @return     void
	 */
	public function setBillboardid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->billboardid !== $v) {
			$this->billboardid = $v;
			$this->modifiedColumns[] = AdvertisementPeer::BILLBOARDID;
		}

		if ($this->aBillboard !== null && $this->aBillboard->getId() !== $v) {
			$this->aBillboard = null;
		}

	} // setBillboardid()

	/**
	 * Set the value of [themeid] column.
	 * motivo del aviso
	 * @param      int $v new value
	 * @return     void
	 */
	public function setThemeid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->themeid !== $v) {
			$this->themeid = $v;
			$this->modifiedColumns[] = AdvertisementPeer::THEMEID;
		}

		if ($this->aTheme !== null && $this->aTheme->getId() !== $v) {
			$this->aTheme = null;
		}

	} // setThemeid()

	/**
	 * Set the value of [workforceid] column.
	 * contratista asignado a ese workforce (solo sextuples)
	 * @param      int $v new value
	 * @return     void
	 */
	public function setWorkforceid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->workforceid !== $v || $v === 0) {
			$this->workforceid = $v;
			$this->modifiedColumns[] = AdvertisementPeer::WORKFORCEID;
		}

		if ($this->aWorkforce !== null && $this->aWorkforce->getId() !== $v) {
			$this->aWorkforce = null;
		}

	} // setWorkforceid()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->date = $rs->getDate($startcol + 1, null);

			$this->publishdate = $rs->getDate($startcol + 2, null);

			$this->duration = $rs->getInt($startcol + 3);

			$this->billboardid = $rs->getInt($startcol + 4);

			$this->themeid = $rs->getInt($startcol + 5);

			$this->workforceid = $rs->getInt($startcol + 6);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = AdvertisementPeer::NUM_COLUMNS - AdvertisementPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Advertisement object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AdvertisementPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			AdvertisementPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AdvertisementPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aBillboard !== null) {
				if ($this->aBillboard->isModified()) {
					$affectedRows += $this->aBillboard->save($con);
				}
				$this->setBillboard($this->aBillboard);
			}

			if ($this->aTheme !== null) {
				if ($this->aTheme->isModified()) {
					$affectedRows += $this->aTheme->save($con);
				}
				$this->setTheme($this->aTheme);
			}

			if ($this->aWorkforce !== null) {
				if ($this->aWorkforce->isModified()) {
					$affectedRows += $this->aWorkforce->save($con);
				}
				$this->setWorkforce($this->aWorkforce);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AdvertisementPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AdvertisementPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aBillboard !== null) {
				if (!$this->aBillboard->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aBillboard->getValidationFailures());
				}
			}

			if ($this->aTheme !== null) {
				if (!$this->aTheme->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTheme->getValidationFailures());
				}
			}

			if ($this->aWorkforce !== null) {
				if (!$this->aWorkforce->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aWorkforce->getValidationFailures());
				}
			}


			if (($retval = AdvertisementPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AdvertisementPeer::DATABASE_NAME);

		if ($this->isColumnModified(AdvertisementPeer::ID)) $criteria->add(AdvertisementPeer::ID, $this->id);
		if ($this->isColumnModified(AdvertisementPeer::DATE)) $criteria->add(AdvertisementPeer::DATE, $this->date);
		if ($this->isColumnModified(AdvertisementPeer::PUBLISHDATE)) $criteria->add(AdvertisementPeer::PUBLISHDATE, $this->publishdate);
		if ($this->isColumnModified(AdvertisementPeer::DURATION)) $criteria->add(AdvertisementPeer::DURATION, $this->duration);
		if ($this->isColumnModified(AdvertisementPeer::BILLBOARDID)) $criteria->add(AdvertisementPeer::BILLBOARDID, $this->billboardid);
		if ($this->isColumnModified(AdvertisementPeer::THEMEID)) $criteria->add(AdvertisementPeer::THEMEID, $this->themeid);
		if ($this->isColumnModified(AdvertisementPeer::WORKFORCEID)) $criteria->add(AdvertisementPeer::WORKFORCEID, $this->workforceid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AdvertisementPeer::DATABASE_NAME);

		$criteria->add(AdvertisementPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Advertisement (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDate($this->date);

		$copyObj->setPublishdate($this->publishdate);

		$copyObj->setDuration($this->duration);

		$copyObj->setBillboardid($this->billboardid);

		$copyObj->setThemeid($this->themeid);

		$copyObj->setWorkforceid($this->workforceid);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Advertisement Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AdvertisementPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AdvertisementPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Billboard object.
	 *
	 * @param      Billboard $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setBillboard($v)
	{


		if ($v === null) {
			$this->setBillboardid(NULL);
		} else {
			$this->setBillboardid($v->getId());
		}


		$this->aBillboard = $v;
	}


	/**
	 * Get the associated Billboard object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Billboard The associated Billboard object.
	 * @throws     PropelException
	 */
	public function getBillboard($con = null)
	{
		// include the related Peer class
		include_once 'lausi/om/BaseBillboardPeer.php';

		if ($this->aBillboard === null && ($this->billboardid !== null)) {

			$this->aBillboard = BillboardPeer::retrieveByPK($this->billboardid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = BillboardPeer::retrieveByPK($this->billboardid, $con);
			   $obj->addBillboards($this);
			 */
		}
		return $this->aBillboard;
	}

	/**
	 * Declares an association between this object and a Theme object.
	 *
	 * @param      Theme $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setTheme($v)
	{


		if ($v === null) {
			$this->setThemeid(NULL);
		} else {
			$this->setThemeid($v->getId());
		}


		$this->aTheme = $v;
	}


	/**
	 * Get the associated Theme object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Theme The associated Theme object.
	 * @throws     PropelException
	 */
	public function getTheme($con = null)
	{
		// include the related Peer class
		include_once 'lausi/om/BaseThemePeer.php';

		if ($this->aTheme === null && ($this->themeid !== null)) {

			$this->aTheme = ThemePeer::retrieveByPK($this->themeid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ThemePeer::retrieveByPK($this->themeid, $con);
			   $obj->addThemes($this);
			 */
		}
		return $this->aTheme;
	}

	/**
	 * Declares an association between this object and a Workforce object.
	 *
	 * @param      Workforce $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setWorkforce($v)
	{


		if ($v === null) {
			$this->setWorkforceid('0');
		} else {
			$this->setWorkforceid($v->getId());
		}


		$this->aWorkforce = $v;
	}


	/**
	 * Get the associated Workforce object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Workforce The associated Workforce object.
	 * @throws     PropelException
	 */
	public function getWorkforce($con = null)
	{
		// include the related Peer class
		include_once 'lausi/om/BaseWorkforcePeer.php';

		if ($this->aWorkforce === null && ($this->workforceid !== null)) {

			$this->aWorkforce = WorkforcePeer::retrieveByPK($this->workforceid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = WorkforcePeer::retrieveByPK($this->workforceid, $con);
			   $obj->addWorkforces($this);
			 */
		}
		return $this->aWorkforce;
	}

} // BaseAdvertisement
