<?php

/**
 * Skeleton subclass for representing a row from the 'lausi_billboard' table.
 *
 * Base de Activos (Carteleras)
 *
 * This class was autogenerated by Propel on:
 *
 * 03/28/08 09:59:17
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lausi
 */
class Billboard extends BaseBillboard {

		public $checked = false;
		
		protected $typeNames = array(
			BillboardPeer::TYPE_DOBLE => "Doble",
            BillboardPeer::TYPE_SEXTUPLE => "Séxtuple"
		);

        function setColumn($column) {
                return $this->setBillboardColumn($column);
        }
        
        function getColumn() {
                return $this->getBillboardColumn();
        }        
        
        function getTypeName() {
                $type = $this->getType();
                $name = $this->typeNames[$type];
				return $name;
        }
		
		public function save(PropelPDO $con = null) {
			try {
				if ($this->validate()) { 
					parent::save($con);
					return true;
				} else {
					return false;
				}
			}
			catch (PropelException $exp) {
				if (ConfigModule::get("global","showPropelExceptions"))
					print_r($exp->getMessage());
				return false;
			}
		}
        
        /**
         *
         * Verifica que este disponible la cartelera para una cierta fecha y duracion
         * 
         * @param date $fromDate fecha de publicacion
         * @param integer $duration duracion de la publicacion
         */
        function isAvailable($fromDate, $duration) {
        	return AdvertisementQuery::create()
				->filterByBillboard($this)
				->filterByPublished($fromDate, $duration)
				->count() == 0;
      	}
        
        /**
         * Obtiene los avisos que estan en esa cartelera el dia de hoy
         * @return array instancia de advertisements
         *
         */
        private function getTodayAdvertisements() {
        	return AdvertisementQuery::create()
				->filterByCurrent()
				->filterByBillboard($this)
				->find();
        }
        
		/**
		 * Indica si la cartelera esta disponible hoy
		 *
		 * @return boolean devuelve true si esta disponible o la instancia que esta ocupando en este momento la cartelera
		 */
		public function isAvailableToday() {
			return AdvertisementQuery::create()
				->filterByCurrent()
				->filterByBillboard($this)
				->count() == 0;
		}
        
		/**
		 * Devuelve el motivo que se encuentra el dia de hoy en la cartelera.
		 *
		 * @return Theme instancia de theme, o null en caso que este libre
		 *
		 */
		public function getCurrentTheme() {
			//No usamos el getTodayAdvertisements, así nos ahorramos la hidratacion de cosas innecesarias
			return ThemeQuery::create()
				->filterByBillboard($this)
				->filterByCurrent()
				->findOne();
		}
		
		/**
		 * Devuelve el ultimo motivo publicado en esa cartelera a la fecha de hoy.
		 * @return Theme instanacia de Theme
		 */
		public function getLastTheme() {
			$advert = AdvertisementQuery::create()
				->filterByCurrent()
				->filterByBillboard($this)
				->orderByPublishdate('desc')
				->findOne();
			
			if (empty($advert))
				return false;
			
			return $advert->getTheme();
		}
		
		/**
		 * Devuelve el ultimo motivo publicado en esa cartelera a la fecha.
		 * @return Theme instanacia de Theme
		 */
		public function getPreviousTheme($date) {
			if (empty($date))
				$date = date('Y-m-d');
				
			$adverts = AdvertisementQuery::create()
				->filterByBillboard($this)
				->filterByPublishDate(array('max'=>$date))
				->orderByPublishdate('desc')
				->limit(2)
				->find();
				
			if (empty($adverts)) 
				return false;
			$advert = $adverts[1];
			
			if (empty($advert))
				return false;
			
			return $advert->getTheme();
		}
		
		public function setChecked() {
			$this->checked = true;
		}
		
		public function isChecked() {
			return $this->checked;
		}
		
		public function getToBePublished($date,$themeId) {
			return AdvertisementQuery::create()
				->filterToBePublished($date,$themeId)
				->filterByBillboard($this)
				->find();
		}
		
		public function getToBePublishedCount($date,$themeId) {
			return AdvertisementQuery::create()
				->filterToBePublished($date,$themeId)
				->filterByBillboard($this)
				->count();
		}
} // Billboard
