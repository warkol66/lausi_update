<?php

/**
 * Skeleton subclass for performing query and update operations on the 'usersByRegistration_user' table.
 *
 * Users by registration
 *
 * This class was autogenerated by Propel on:
 *
 * 08/15/07 01:55:57
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class UserByRegistrationPeer extends BaseUserByRegistrationPeer {

		//Setea si se eliminan realmente los usuarios de la base de datos o se marcan como no activos
		const DELETEUSERS = false;


	/**
	* Autentica a un usuario.
	*
	* @param string $username Nombre de usuario
	* @param string $mailAddress Email
	* @return array [0] -> User Informacion sobre el usuario; [1] -> New password, false si no fue exitosa la autenticacion de usuario e email
	*/
	function auth($username,$password) {
		$cond = new Criteria();
		$usernameLowercase = strtolower($username);
		$cond->add(UserByRegistrationPeer::USERNAME, $usernameLowercase);
		$cond->add(UserByRegistrationPeer::ACTIVE, "1");
		$result = UserByRegistrationPeer::doSelectJoinUserByRegistrationInfo($cond);
		$user = $result[0];
		if ( !empty($user) ) {
			if ( $user->getPassword() == md5($password."ASD") ) {
				$user->setLastLogin(time());
				$user->save();
				return $user;
			}
		}
		return false;
  	}

	/**
	 * Obtiene todos los usuarios que estan activos.
	 *
	 * @return array de instancias de UserByRegistration.
	 */

	function getAll() {

		$condition = new Criteria();
		$condition->add(UserByRegistrationPeer::ACTIVE, 1);
		$result = UserByRegistrationPeer::doSelectJoinUserByRegistrationInfo($condition);
		return $result;

	}

	/**
	 * Devuelve todos los UsersByRegistration desactivados.
	 * @return array de instancia de UserByRegistration.
	 */
	function getAllInactive() {
		$condition = new Criteria();
		$condition->add(UserByRegistrationPeer::ACTIVE, 0);
		$result = UserByRegistrationPeer::doSelectJoinUserByRegistrationInfo($condition);
		return $result;
	}

	  /*
	   * Verifica si ya existe un usuario con ese nombre de usuario
	   * @param string $username nombre de usuario
	   * @return boolean true si el nombre de usuario existe, false sino.
	   */
	  function usernameExists($username) {
		$usernameLowercase = strtolower($username);
		$crit = new Criteria();
		$crit->add(UserByRegistrationPeer::USERNAME,$usernameLowercase);
		$result = UserByRegistrationPeer::doSelect($crit);
		if (empty($result))
			return false;
   
		return true;
	  }


	/**
	 * Crea un nuevo usuario de registracion
	 * 
	 * @param string $username nombre de usuario
  	 * @param string $name Nombre de pila del usuario
	 * @param string $surname apellido del usuario
	 * @param $pass contrasenia
	 * @param string $email email del usuario
	 * @return boolean true si se creo el usuario, false en caso de error. 
	 * TODO agregar IP y last login.
	 */
	function create($username,$name,$surname,$pass,$mail) {
		
		$usernameLowercase = strtolower($username);
		if (UserByRegistrationPeer::usernameExists($usernameLowercase))
			return false;
		
		try {
			//armado de usuario
			$newuser = new UserByRegistration();
			$newuser->setUsername($usernameLowercase);
			$newuser->setPassword(md5($pass."ASD"));
			$newuser->setCreated(time());
			$newuser->setUpdated(time());
			$newuser->setActive(1);
			$newuser->setIp($_SERVER["REMOTE_ADDR"]);
			$newuser->save();
			//armado de la informacion del usuario
			$newuserinfo = new UserByRegistrationInfo();
			$newuserinfo->setUserId($newuser->getId());
			$newuserinfo->setName($name);
			$newuserinfo->setSurname($surname);
			$newuserinfo->setMailAddress($mail);
			$newuserinfo->save();
		}
		catch (PropelException $ex) {
			return false;
		}
		
		return true;


	}

  	/**
	 * Obtiene la informacion de un usuario por registracion segun su id.
  	 *
	 * @param int $id Id del usuario por registracion
	 * @return array con informacion del usuario por registracion
  	 */  
	function get($id) {
		$cond = new Criteria();
		$cond->add(UserByRegistrationPeer::ID, $id);
		$todosObj = UserByRegistrationPeer::doSelectJoinUserByRegistrationInfo($cond);
		return $todosObj[0];
  	}

  /**
  * Actualiza la informacion de un usuario.
  *
  * @param int $id Id del usuario
  * @param string $username Nombre de usuario
  * @param string $name Nombre del usuario
  * @param string $surname Apellido del usuario
  * @param string $pass Contrase単a del usuario
  * @param string $mailA Email del usuario
  * @return boolean true si se actualizo la informacion correctamente, false sino
  */
  function update($id,$username,$name,$surname,$pass,$mail) {
		
		$usernameLowercase = strtolower($username);
		
		try {

			$user = UserByRegistrationPeer::retrieveByPK($id);
						
			if (($user->getUsername()) != $usernameLowercase) {
				//se cambio el nombre de usuario
				if (UserByRegistrationPeer::usernameExists($usernameLowercase))
					return false;
			}
			
			$user->setUsername($usernameLowercase);
			$user->setUpdated(time());
			if ( !empty($pass) )
				$user->setPassword(md5($pass."ASD"));
			$user->save();
			$userInfo = UserByRegistrationInfoPeer::retrieveByPK($id);
			$userInfo->setName($name);
			$userInfo->setSurname($surname);
			$userInfo->setMailAddress($mail);			
			$userInfo->save();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
  	}

  /**
   * Elimina un usuario a partir del id.
   *
   * @param int $id Id del usuario
   * @return boolean true
   */
  function delete($id) {
		$user = UserByRegistrationPeer::retrieveByPk($id);
		if (UserByRegistrationPeer::DELETEUSERS)
			$user->delete();
		else {
			$user->setActive(0);
			$user->save();
		}
		return true;		
  }

  /**
   * Verifica si un nombre de usuario se encuentra en uso.
   * @param string $username nombre de usuario candidato
   * @return boolean devuelve true si esta en uso y false en caso contrario
   */
  function usernameIsUsed($username) {
		$cond = new Criteria();
		$cond->add(UserByRegistrationPeer::USERNAME, $username);
		$result = UserByRegistrationPeer::doSelect($cond);
		if (empty($result)) {
			return false;
		}
		
		return true;
  }

	/**
	* Autentica a un usuario.
	*
	* @param string $username Nombre de usuario
	* @param string $mailAddress Email
	* @return array [0] -> User Informacion sobre el usuario; [1] -> New password, false si no fue exitosa la autenticacion de usuario e email
	*/  
  function generatePassword($username,$mailAddress) {
		$cond = new Criteria();
		$usernameLowercase = strtolower($username);
		$cond->add(UserbyRegistrationPeer::USERNAME, $usernameLowercase);
		$cond->add(UserByRegistrationPeer::ACTIVE, "1");
		$todosObj = UserByRegistrationPeer::doSelectJoinUserByRegistrationInfo($cond);
		$user = $todosObj[0];
		if ( !empty($user) ) {
			$userInfo = $user->getUserInfo();
			if ( !empty($userInfo) && $userInfo->getMailAddress() == $mailAddress ) {
				$newPassword = UserByRegistrationPeer::getNewPassword();
				$user->setPassword(md5($newPassword."ASD"));
				$user->save();
				$result = array();
				$result[0] = $user;
				$result[1] = $newPassword;
				return $result;
			}
		}
		return false;
  }

  /**
  * Genera una nueva contrase単a.
  *
  * @param int $length [optional] Longitud de la contrase単a
  * @return string Contrase単a
  */
	function getNewPassword($length = 8)
	{
  	// start with a blank password
	  $password = "";

  	// define possible characters
	  $possible = "0123456789bcdfghjkmnpqrstvwxyz";

	  // set up a counter
  	$i = 0;

	  // add random characters to $password until $length is reached
  	while ($i < $length) {

	    // pick a random character from the possible ones
  	  $char = substr($possible, mt_rand(0, strlen($possible)-1), 1);

	    // we don't want this character if it's already in the password
  	  if (!strstr($password, $char)) {
	      $password .= $char;
  	    $i++;
	    }
	  }
  	// done!
	  return $password;
	}

} // UserByRegistrationPeer
