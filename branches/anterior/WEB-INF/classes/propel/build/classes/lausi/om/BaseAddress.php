<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'lausi/AddressPeer.php';

/**
 * Base class that represents a row from the 'lausi_address' table.
 *
 * Base de Direcciones
 *
 * This class was autogenerated by Propel on:
 *
 * 10/03/08 16:25:59
 *
 * @package    lausi.om
 */
abstract class BaseAddress extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AddressPeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;


	/**
	 * The value for the street field.
	 * @var        string
	 */
	protected $street;


	/**
	 * The value for the number field.
	 * @var        int
	 */
	protected $number;


	/**
	 * The value for the rating field.
	 * @var        int
	 */
	protected $rating;


	/**
	 * The value for the intersection field.
	 * @var        string
	 */
	protected $intersection;


	/**
	 * The value for the owner field.
	 * @var        string
	 */
	protected $owner;


	/**
	 * The value for the latitude field.
	 * @var        double
	 */
	protected $latitude;


	/**
	 * The value for the longitude field.
	 * @var        double
	 */
	protected $longitude;


	/**
	 * The value for the regionid field.
	 * @var        int
	 */
	protected $regionid;


	/**
	 * The value for the ownerphone field.
	 * @var        string
	 */
	protected $ownerphone;


	/**
	 * The value for the ordercircuit field.
	 * @var        int
	 */
	protected $ordercircuit = 0;


	/**
	 * The value for the nickname field.
	 * @var        string
	 */
	protected $nickname = '';


	/**
	 * The value for the circuitid field.
	 * @var        int
	 */
	protected $circuitid;

	/**
	 * @var        Circuit
	 */
	protected $aCircuit;

	/**
	 * @var        Region
	 */
	protected $aRegion;

	/**
	 * Collection to store aggregation of collBillboards.
	 * @var        array
	 */
	protected $collBillboards;

	/**
	 * The criteria used to select the current contents of collBillboards.
	 * @var        Criteria
	 */
	protected $lastBillboardCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * Id de la calle
	 * @return     int
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [street] column value.
	 * Nombre de la calle
	 * @return     string
	 */
	public function getStreet()
	{

		return $this->street;
	}

	/**
	 * Get the [number] column value.
	 * numero de la calle
	 * @return     int
	 */
	public function getNumber()
	{

		return $this->number;
	}

	/**
	 * Get the [rating] column value.
	 * Valoracion de la calle
	 * @return     int
	 */
	public function getRating()
	{

		return $this->rating;
	}

	/**
	 * Get the [intersection] column value.
	 * cruce con otra calle de la direccion
	 * @return     string
	 */
	public function getIntersection()
	{

		return $this->intersection;
	}

	/**
	 * Get the [owner] column value.
	 * duenio de la direccion
	 * @return     string
	 */
	public function getOwner()
	{

		return $this->owner;
	}

	/**
	 * Get the [latitude] column value.
	 * latitud de la direccion
	 * @return     double
	 */
	public function getLatitude()
	{

		return $this->latitude;
	}

	/**
	 * Get the [longitude] column value.
	 * longitud de la direccion
	 * @return     double
	 */
	public function getLongitude()
	{

		return $this->longitude;
	}

	/**
	 * Get the [regionid] column value.
	 * barrio de la direccion
	 * @return     int
	 */
	public function getRegionid()
	{

		return $this->regionid;
	}

	/**
	 * Get the [ownerphone] column value.
	 * telefono de contacto
	 * @return     string
	 */
	public function getOwnerphone()
	{

		return $this->ownerphone;
	}

	/**
	 * Get the [ordercircuit] column value.
	 * ordenamiento por proximidad en el circuito entre direcciones
	 * @return     int
	 */
	public function getOrdercircuit()
	{

		return $this->ordercircuit;
	}

	/**
	 * Get the [nickname] column value.
	 * Nombre de Fantasia de la direccion
	 * @return     string
	 */
	public function getNickname()
	{

		return $this->nickname;
	}

	/**
	 * Get the [circuitid] column value.
	 * circuito al que pertenece la calle
	 * @return     int
	 */
	public function getCircuitid()
	{

		return $this->circuitid;
	}

	/**
	 * Set the value of [id] column.
	 * Id de la calle
	 * @param      int $v new value
	 * @return     void
	 */
	public function setId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AddressPeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [street] column.
	 * Nombre de la calle
	 * @param      string $v new value
	 * @return     void
	 */
	public function setStreet($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->street !== $v) {
			$this->street = $v;
			$this->modifiedColumns[] = AddressPeer::STREET;
		}

	} // setStreet()

	/**
	 * Set the value of [number] column.
	 * numero de la calle
	 * @param      int $v new value
	 * @return     void
	 */
	public function setNumber($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->number !== $v) {
			$this->number = $v;
			$this->modifiedColumns[] = AddressPeer::NUMBER;
		}

	} // setNumber()

	/**
	 * Set the value of [rating] column.
	 * Valoracion de la calle
	 * @param      int $v new value
	 * @return     void
	 */
	public function setRating($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->rating !== $v) {
			$this->rating = $v;
			$this->modifiedColumns[] = AddressPeer::RATING;
		}

	} // setRating()

	/**
	 * Set the value of [intersection] column.
	 * cruce con otra calle de la direccion
	 * @param      string $v new value
	 * @return     void
	 */
	public function setIntersection($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->intersection !== $v) {
			$this->intersection = $v;
			$this->modifiedColumns[] = AddressPeer::INTERSECTION;
		}

	} // setIntersection()

	/**
	 * Set the value of [owner] column.
	 * duenio de la direccion
	 * @param      string $v new value
	 * @return     void
	 */
	public function setOwner($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->owner !== $v) {
			$this->owner = $v;
			$this->modifiedColumns[] = AddressPeer::OWNER;
		}

	} // setOwner()

	/**
	 * Set the value of [latitude] column.
	 * latitud de la direccion
	 * @param      double $v new value
	 * @return     void
	 */
	public function setLatitude($v)
	{

		if ($this->latitude !== $v) {
			$this->latitude = $v;
			$this->modifiedColumns[] = AddressPeer::LATITUDE;
		}

	} // setLatitude()

	/**
	 * Set the value of [longitude] column.
	 * longitud de la direccion
	 * @param      double $v new value
	 * @return     void
	 */
	public function setLongitude($v)
	{

		if ($this->longitude !== $v) {
			$this->longitude = $v;
			$this->modifiedColumns[] = AddressPeer::LONGITUDE;
		}

	} // setLongitude()

	/**
	 * Set the value of [regionid] column.
	 * barrio de la direccion
	 * @param      int $v new value
	 * @return     void
	 */
	public function setRegionid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->regionid !== $v) {
			$this->regionid = $v;
			$this->modifiedColumns[] = AddressPeer::REGIONID;
		}

		if ($this->aRegion !== null && $this->aRegion->getId() !== $v) {
			$this->aRegion = null;
		}

	} // setRegionid()

	/**
	 * Set the value of [ownerphone] column.
	 * telefono de contacto
	 * @param      string $v new value
	 * @return     void
	 */
	public function setOwnerphone($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->ownerphone !== $v) {
			$this->ownerphone = $v;
			$this->modifiedColumns[] = AddressPeer::OWNERPHONE;
		}

	} // setOwnerphone()

	/**
	 * Set the value of [ordercircuit] column.
	 * ordenamiento por proximidad en el circuito entre direcciones
	 * @param      int $v new value
	 * @return     void
	 */
	public function setOrdercircuit($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->ordercircuit !== $v || $v === 0) {
			$this->ordercircuit = $v;
			$this->modifiedColumns[] = AddressPeer::ORDERCIRCUIT;
		}

	} // setOrdercircuit()

	/**
	 * Set the value of [nickname] column.
	 * Nombre de Fantasia de la direccion
	 * @param      string $v new value
	 * @return     void
	 */
	public function setNickname($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->nickname !== $v || $v === '') {
			$this->nickname = $v;
			$this->modifiedColumns[] = AddressPeer::NICKNAME;
		}

	} // setNickname()

	/**
	 * Set the value of [circuitid] column.
	 * circuito al que pertenece la calle
	 * @param      int $v new value
	 * @return     void
	 */
	public function setCircuitid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->circuitid !== $v) {
			$this->circuitid = $v;
			$this->modifiedColumns[] = AddressPeer::CIRCUITID;
		}

		if ($this->aCircuit !== null && $this->aCircuit->getId() !== $v) {
			$this->aCircuit = null;
		}

	} // setCircuitid()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->street = $rs->getString($startcol + 1);

			$this->number = $rs->getInt($startcol + 2);

			$this->rating = $rs->getInt($startcol + 3);

			$this->intersection = $rs->getString($startcol + 4);

			$this->owner = $rs->getString($startcol + 5);

			$this->latitude = $rs->getFloat($startcol + 6);

			$this->longitude = $rs->getFloat($startcol + 7);

			$this->regionid = $rs->getInt($startcol + 8);

			$this->ownerphone = $rs->getString($startcol + 9);

			$this->ordercircuit = $rs->getInt($startcol + 10);

			$this->nickname = $rs->getString($startcol + 11);

			$this->circuitid = $rs->getInt($startcol + 12);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = AddressPeer::NUM_COLUMNS - AddressPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Address object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AddressPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			AddressPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AddressPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCircuit !== null) {
				if ($this->aCircuit->isModified()) {
					$affectedRows += $this->aCircuit->save($con);
				}
				$this->setCircuit($this->aCircuit);
			}

			if ($this->aRegion !== null) {
				if ($this->aRegion->isModified()) {
					$affectedRows += $this->aRegion->save($con);
				}
				$this->setRegion($this->aRegion);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AddressPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AddressPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBillboards !== null) {
				foreach($this->collBillboards as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCircuit !== null) {
				if (!$this->aCircuit->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCircuit->getValidationFailures());
				}
			}

			if ($this->aRegion !== null) {
				if (!$this->aRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRegion->getValidationFailures());
				}
			}


			if (($retval = AddressPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBillboards !== null) {
					foreach($this->collBillboards as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AddressPeer::DATABASE_NAME);

		if ($this->isColumnModified(AddressPeer::ID)) $criteria->add(AddressPeer::ID, $this->id);
		if ($this->isColumnModified(AddressPeer::STREET)) $criteria->add(AddressPeer::STREET, $this->street);
		if ($this->isColumnModified(AddressPeer::NUMBER)) $criteria->add(AddressPeer::NUMBER, $this->number);
		if ($this->isColumnModified(AddressPeer::RATING)) $criteria->add(AddressPeer::RATING, $this->rating);
		if ($this->isColumnModified(AddressPeer::INTERSECTION)) $criteria->add(AddressPeer::INTERSECTION, $this->intersection);
		if ($this->isColumnModified(AddressPeer::OWNER)) $criteria->add(AddressPeer::OWNER, $this->owner);
		if ($this->isColumnModified(AddressPeer::LATITUDE)) $criteria->add(AddressPeer::LATITUDE, $this->latitude);
		if ($this->isColumnModified(AddressPeer::LONGITUDE)) $criteria->add(AddressPeer::LONGITUDE, $this->longitude);
		if ($this->isColumnModified(AddressPeer::REGIONID)) $criteria->add(AddressPeer::REGIONID, $this->regionid);
		if ($this->isColumnModified(AddressPeer::OWNERPHONE)) $criteria->add(AddressPeer::OWNERPHONE, $this->ownerphone);
		if ($this->isColumnModified(AddressPeer::ORDERCIRCUIT)) $criteria->add(AddressPeer::ORDERCIRCUIT, $this->ordercircuit);
		if ($this->isColumnModified(AddressPeer::NICKNAME)) $criteria->add(AddressPeer::NICKNAME, $this->nickname);
		if ($this->isColumnModified(AddressPeer::CIRCUITID)) $criteria->add(AddressPeer::CIRCUITID, $this->circuitid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AddressPeer::DATABASE_NAME);

		$criteria->add(AddressPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Address (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setStreet($this->street);

		$copyObj->setNumber($this->number);

		$copyObj->setRating($this->rating);

		$copyObj->setIntersection($this->intersection);

		$copyObj->setOwner($this->owner);

		$copyObj->setLatitude($this->latitude);

		$copyObj->setLongitude($this->longitude);

		$copyObj->setRegionid($this->regionid);

		$copyObj->setOwnerphone($this->ownerphone);

		$copyObj->setOrdercircuit($this->ordercircuit);

		$copyObj->setNickname($this->nickname);

		$copyObj->setCircuitid($this->circuitid);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getBillboards() as $relObj) {
				$copyObj->addBillboard($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Address Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AddressPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AddressPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Circuit object.
	 *
	 * @param      Circuit $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setCircuit($v)
	{


		if ($v === null) {
			$this->setCircuitid(NULL);
		} else {
			$this->setCircuitid($v->getId());
		}


		$this->aCircuit = $v;
	}


	/**
	 * Get the associated Circuit object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Circuit The associated Circuit object.
	 * @throws     PropelException
	 */
	public function getCircuit($con = null)
	{
		// include the related Peer class
		include_once 'lausi/om/BaseCircuitPeer.php';

		if ($this->aCircuit === null && ($this->circuitid !== null)) {

			$this->aCircuit = CircuitPeer::retrieveByPK($this->circuitid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = CircuitPeer::retrieveByPK($this->circuitid, $con);
			   $obj->addCircuits($this);
			 */
		}
		return $this->aCircuit;
	}

	/**
	 * Declares an association between this object and a Region object.
	 *
	 * @param      Region $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setRegion($v)
	{


		if ($v === null) {
			$this->setRegionid(NULL);
		} else {
			$this->setRegionid($v->getId());
		}


		$this->aRegion = $v;
	}


	/**
	 * Get the associated Region object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Region The associated Region object.
	 * @throws     PropelException
	 */
	public function getRegion($con = null)
	{
		// include the related Peer class
		include_once 'lausi/om/BaseRegionPeer.php';

		if ($this->aRegion === null && ($this->regionid !== null)) {

			$this->aRegion = RegionPeer::retrieveByPK($this->regionid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = RegionPeer::retrieveByPK($this->regionid, $con);
			   $obj->addRegions($this);
			 */
		}
		return $this->aRegion;
	}

	/**
	 * Temporary storage of collBillboards to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initBillboards()
	{
		if ($this->collBillboards === null) {
			$this->collBillboards = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Address has previously
	 * been saved, it will retrieve related Billboards from storage.
	 * If this Address is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getBillboards($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'lausi/om/BaseBillboardPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBillboards === null) {
			if ($this->isNew()) {
			   $this->collBillboards = array();
			} else {

				$criteria->add(BillboardPeer::ADDRESSID, $this->getId());

				BillboardPeer::addSelectColumns($criteria);
				$this->collBillboards = BillboardPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BillboardPeer::ADDRESSID, $this->getId());

				BillboardPeer::addSelectColumns($criteria);
				if (!isset($this->lastBillboardCriteria) || !$this->lastBillboardCriteria->equals($criteria)) {
					$this->collBillboards = BillboardPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBillboardCriteria = $criteria;
		return $this->collBillboards;
	}

	/**
	 * Returns the number of related Billboards.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countBillboards($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'lausi/om/BaseBillboardPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(BillboardPeer::ADDRESSID, $this->getId());

		return BillboardPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Billboard object to this object
	 * through the Billboard foreign key attribute
	 *
	 * @param      Billboard $l Billboard
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBillboard(Billboard $l)
	{
		$this->collBillboards[] = $l;
		$l->setAddress($this);
	}

} // BaseAddress
