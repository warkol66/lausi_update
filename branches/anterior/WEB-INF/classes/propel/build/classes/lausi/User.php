<?php
require_once 'om/BaseUser.php';

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [07/25/06 16:04:22]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class User extends BaseUser {

	function getGroups() {
		require_once("GroupPeer.php");
		$cond = new Criteria();
		$cond->add(UserGroupPeer::USERID, $this->getId());
		$todosObj = UserGroupPeer::doSelectJoinGroup($cond);
		return $todosObj;
	}

	function isSupervisor() {
  	$groups = $this->getGroups();
  	foreach ($groups as $group) {
  		if ( $group->getGroupId() == 1 ) {
  			return true;
  		}
		}
		return false;
	}

	function isAdmin() {

  	$groups = $this->getGroups();
  	foreach ($groups as $group) {
  		if ( $group->getGroupId() == 2 ) {
  			return true;
  		}
		}
		return false;

	}
	
	/*
	 * Indica si un usuario es un supplier dependiendo si el mismo tiene
	 * el nivel de usuario supplier
	 * @returns true si es un supplier, false sino.
	 */
	function isSupplier(){
		
		$result = false;

		if ($this->getLevelId() == 4)
			$result = true;

		return $result;
	}

   /**
    * Return an array with all the categories this user can access
    *
    * @return array of Catetegory
    */
  function getCategories(){
  	if ($this->isAdmin() || $this->isSupervisor())
  		return CategoryPeer::getAll();
		require_once("UserGroupPeer.php");
  	require_once("GroupCategoryPeer.php");
  	$sql = "SELECT ".CategoryPeer::TABLE_NAME.".* FROM ".UserGroupPeer::TABLE_NAME ." ,".
						GroupCategoryPeer::TABLE_NAME .", ".CategoryPeer::TABLE_NAME .
						" where ".UserGroupPeer::USERID ." = '".$this->getId()."' and ".
						UserGroupPeer::GROUPID ." = ".GroupCategoryPeer::GROUPID ." and ".
						GroupCategoryPeer::CATEGORYID ." = ".CategoryPeer::ID ." and ".
						CategoryPeer::ACTIVE ." = 1";
  	
  	$con = Propel::getConnection(UserPeer::DATABASE_NAME);
    $stmt = $con->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_NUM);    
    return BaseCategoryPeer::populateObjects($rs);
  }
  
  /**
  * Asigna los grupos del usuario a una categoria.
  *
  * @param int $categoryId Id de la categoria
  * @return void
  */
  function setGroupsToCategory($categoryId) {
  	require_once("GroupCategoryPeer.php");                                            	
		foreach ($this->getGroups() as $group) {
			$groupCategory = new GroupCategory();
			$groupCategory->setGroupId($group->getGroupId());
			$groupCategory->setCategoryId($categoryId);
			$groupCategory->save();
		}
		return;
	}


	function getAffiliateId(){
		return 0;
	}

		

}
